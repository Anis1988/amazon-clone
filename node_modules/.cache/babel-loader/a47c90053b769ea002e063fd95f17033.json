{"ast":null,"code":"export const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\nexport const initialState = {\n  basket: [],\n  user: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_USER\":\n      return { ...state,\n        user: action.payload\n      };\n    //action.payload = user\n\n    case \"ADD_TO_BASKET\":\n      return { ...state,\n        basket: [...state.basket, action.payload]\n      }; // action.payload=object\n\n      break;\n\n    case \"REMOVE_FROM_BASKET\":\n      const newBasket = state.basket.filter(item => {\n        return item.id !== action.payload; // action.payload=id\n      });\n      return { ...state,\n        basket: newBasket\n      };\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/anismedini/Desktop/code-js/amazon-clone/src/Reducer.js"],"names":["getBasketTotal","basket","reduce","amount","item","price","initialState","user","reducer","state","action","type","payload","newBasket","filter","id"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,MAAD,IAC5BA,MAD4B,aAC5BA,MAD4B,uBAC5BA,MAAM,CAAEC,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADK;AAGP,OAAO,MAAMG,YAAY,GAAG;AAC1BL,EAAAA,MAAM,EAAE,EADkB;AAE1BM,EAAAA,IAAI,EAAE;AAFoB,CAArB;;AAIP,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYF,QAAAA,IAAI,EAAEG,MAAM,CAACE;AAAzB,OAAP;AAA2C;;AAC7C,SAAK,eAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACE,OAAzB;AAApB,OAAP,CADF,CACkE;;AAChE;;AACF,SAAK,oBAAL;AACE,YAAMC,SAAS,GAAGJ,KAAK,CAACR,MAAN,CAAaa,MAAb,CAAqBV,IAAD,IAAU;AAC9C,eAAOA,IAAI,CAACW,EAAL,KAAYL,MAAM,CAACE,OAA1B,CAD8C,CACX;AACpC,OAFiB,CAAlB;AAGA,aAAO,EAAE,GAAGH,KAAL;AAAYR,QAAAA,MAAM,EAAEY;AAApB,OAAP;AACA;;AAEF;AACE,aAAOJ,KAAP;AAdJ;AAgBD,CAjBD;;AAkBA,eAAeD,OAAf","sourcesContent":["export const getBasketTotal = (basket) =>\n  basket?.reduce((amount, item) => item.price + amount, 0);\n\nexport const initialState = {\n  basket: [],\n  user: null,\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_USER\":\n      return { ...state, user: action.payload }; //action.payload = user\n    case \"ADD_TO_BASKET\":\n      return { ...state, basket: [...state.basket, action.payload] }; // action.payload=object\n      break;\n    case \"REMOVE_FROM_BASKET\":\n      const newBasket = state.basket.filter((item) => {\n        return item.id !== action.payload; // action.payload=id\n      });\n      return { ...state, basket: newBasket };\n      break;\n\n    default:\n      return state;\n  }\n};\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}